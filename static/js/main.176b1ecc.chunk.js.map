{"version":3,"sources":["components/DaysCalculator.js","components/TimeCalculator.js","App.js","serviceWorker.js","index.js"],"names":["DaysCalculator","useState","fromDate","setFromDate","toDate","setToDate","result","setResult","excludeSunday","isExcludeSunday","excludeSaturday","isExcludeSaturday","totalWekendDays","dayNumber","weekendDayCount","currenDate","Date","getDay","console","log","setDate","getDate","className","selected","dateFormat","onChange","date","aria-hidden","type","name","value","event","target","checked","onClick","e","preventDefault","alert","checkValidations","totalDays","differences","Math","abs","total","round","excludedSundays","excludedSaturdays","TimeCalculator","title","App","Boolean","window","location","hostname","match","ReactGA","initialize","pageview","pathname","search","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.176b1ecc.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"./datepicker.scss\";\r\n\r\n/**\r\n * Day Calculator Component\r\n *  @author Suraj Kamdi \r\n */\r\nfunction DaysCalculator() {\r\n    const [fromDate, setFromDate] = useState(\"\");\r\n    const [toDate, setToDate] = useState(\"\");\r\n    const [result, setResult] = useState(0);\r\n    const [excludeSunday, isExcludeSunday] = useState(false);\r\n    const [excludeSaturday, isExcludeSaturday] = useState(false);\r\n\r\n    /**\r\n     * Function for calculating Total Days.\r\n     * @param {event} e \r\n     */\r\n    function calculateTotalDays(e) {\r\n        e.preventDefault();\r\n        //checkValidations\r\n        checkValidations();\r\n        let totalDays = 0;\r\n\r\n        if (fromDate !== \"\" && toDate !== \"\") {\r\n            const SINGLE_DAY = 1000 * 60 * 60 * 24;\r\n            const differences = Math.abs(fromDate - toDate);\r\n            let total = Math.round(differences / SINGLE_DAY);\r\n            let excludedSundays = totalWekendDays(0);\r\n            let excludedSaturdays = totalWekendDays(6);\r\n\r\n            if (excludeSunday && !excludeSaturday) {\r\n                totalDays = total - excludedSundays;\r\n                setResult(++totalDays);\r\n            } else if (!excludeSunday && excludeSaturday) {\r\n                totalDays = total - excludedSaturdays;\r\n                setResult(++totalDays);\r\n            } else if (excludeSunday && excludeSaturday) {\r\n                totalDays = total - excludedSundays - excludedSaturdays;\r\n                setResult(++totalDays);\r\n            } else {\r\n                setResult(++total);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Getting Total WeekendDays according to day number.\r\n     * @param {weekendDayNumber} dayNumber \r\n     */\r\n    function totalWekendDays(dayNumber) {\r\n        let weekendDayCount = 0;\r\n        let currenDate = new Date(fromDate);\r\n\r\n        if (currenDate.getDay() === dayNumber){\r\n            weekendDayCount = 1;\r\n        }\r\n\r\n        console.log(\"initial =\" +weekendDayCount );\r\n        while (currenDate < toDate) {\r\n            currenDate.setDate(currenDate.getDate() + 1);\r\n            if (currenDate.getDay() === dayNumber){\r\n                weekendDayCount++;\r\n            }       \r\n        }\r\n        return weekendDayCount;\r\n    }\r\n\r\n    /**\r\n     * Form Validations.\r\n     */\r\n    function checkValidations(){\r\n        if(fromDate > toDate){\r\n            alert(\"From Date should not be greater than To Date\");\r\n        }\r\n        return false;\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"heading-h1\">\r\n                <h1>Total Days Calculator</h1>\r\n            </div>\r\n            <div className=\"form-container\">\r\n                <div className=\"field-group\">\r\n                    <label className=\"field-label\">From Date</label>\r\n                    <br />\r\n                    <DatePicker\r\n                        className=\"input--field\"\r\n                        selected={fromDate}\r\n                        dateFormat=\"dd-MMMM-yyyy\"\r\n                        onChange={date => setFromDate(date)} />\r\n                    <i className=\"fa fa-calendar\" aria-hidden=\"true\"></i>\r\n                </div>\r\n                <div className=\"field-group\">\r\n                    <label className=\"field-label\">To Date</label><br />\r\n                    <DatePicker\r\n                        className=\"input--field\"\r\n                        selected={toDate}\r\n                        dateFormat=\"dd-MMMM-yyyy\"\r\n                        onChange={date => setToDate(date)} />\r\n                    <i className=\"fa fa-calendar\" aria-hidden=\"true\"></i>\r\n                </div>\r\n                <div className=\"field-group checkbox--group\">\r\n                    <label className=\"field-label checkbox--field\">\r\n                        Exclude Sunday\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            name=\"excludeSunday\"\r\n                            value=\"excludeSunday\"\r\n                            onChange={event => {\r\n                                isExcludeSunday(event.target.checked);\r\n                            }}\r\n                        />\r\n                        <span className=\"checkmark\"></span>\r\n                    </label>\r\n                    <label className=\"field-label checkbox--field\">\r\n                        Exclude Saturday\r\n                         <input\r\n                            type=\"checkbox\"\r\n                            name=\"excludeSaturday\"\r\n                            value=\"excludeSaturday\"\r\n                            onChange={event => {\r\n                                isExcludeSaturday(event.target.checked);\r\n                            }}\r\n                        />\r\n                        <span className=\"checkmark\"></span>\r\n                    </label>\r\n                </div>\r\n                <button\r\n                    onClick={calculateTotalDays}\r\n                    type=\"button\"\r\n                    name=\"calculate\"\r\n                    className=\"calculate-btn\">Calculate\r\n                    </button>\r\n                <div className=\"result--container\">\r\n                    <h2>{result === 0 ? '' : result + ' Days'}</h2>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default DaysCalculator;","import React from 'react';\r\n/**\r\n * Time Calculator Component\r\n *  @author Suraj Kamdi \r\n */\r\nfunction TimeCalculator() {\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"heading-h1\">\r\n                <h1>Total Time Calculator</h1>\r\n            </div>\r\n            <div className=\"form-container\">\r\n                <div className=\"field-group\">\r\n                    <label className=\"field-label\">From Time</label><br />\r\n                    <input\r\n                        className=\"input--field\"\r\n                        type=\"text\"\r\n                        name=\"fromTime\"\r\n                        title=\"Select From Time\" />\r\n                    <i className=\"fa fa-clock-o\" aria-hidden=\"true\"></i>\r\n                </div>\r\n                <div className=\"field-group\">\r\n                    <label className=\"field-label\">To Time</label><br />\r\n                    <input\r\n                        className=\"input--field\"\r\n                        type=\"text\"\r\n                        name=\"toTime\"\r\n                        title=\"Select To Date\" />\r\n                    <i className=\"fa fa-clock-o\" aria-hidden=\"true\"></i>\r\n                </div>\r\n                <button type=\"button\" name=\"calculate\" className=\"calculate-btn\">Calculate</button>\r\n                <div className=\"result--container\">\r\n                    <h2>1 Hrs 20 min 10 Sec</h2>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default TimeCalculator;","import React from 'react';\nimport './ui-components/css/style.css';\nimport DaysCalculator from './components/DaysCalculator';\nimport TimeCalculator from './components/TimeCalculator';\n\nfunction App() {\n  return (\n    <div className=\"date--time--row\">\n      <DaysCalculator/>\n      <TimeCalculator/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n//import './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport ReactGA from 'react-ga';\r\n\r\n/**\r\n * Google Analytics Code.\r\n */\r\nReactGA.initialize('UA-164371994-1');\r\nReactGA.pageview(window.location.pathname + window.location.search);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}